
package ws.auctionlistingWebService;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AuctionListingWebservice", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AuctionListingWebservice {


    /**
     * 
     * @param auctionId
     * @return
     *     returns ws.auctionlistingWebService.AuctionListing
     * @throws AuctionListingAlreadyClosedException_Exception
     * @throws AuctionListingNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "remoteViewAuctionListingDetails", targetNamespace = "http://ws.session.ejb/", className = "ws.auctionlistingWebService.RemoteViewAuctionListingDetails")
    @ResponseWrapper(localName = "remoteViewAuctionListingDetailsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.auctionlistingWebService.RemoteViewAuctionListingDetailsResponse")
    @Action(input = "http://ws.session.ejb/AuctionListingWebservice/remoteViewAuctionListingDetailsRequest", output = "http://ws.session.ejb/AuctionListingWebservice/remoteViewAuctionListingDetailsResponse", fault = {
        @FaultAction(className = AuctionListingNotFoundException_Exception.class, value = "http://ws.session.ejb/AuctionListingWebservice/remoteViewAuctionListingDetails/Fault/AuctionListingNotFoundException"),
        @FaultAction(className = AuctionListingAlreadyClosedException_Exception.class, value = "http://ws.session.ejb/AuctionListingWebservice/remoteViewAuctionListingDetails/Fault/AuctionListingAlreadyClosedException")
    })
    public AuctionListing remoteViewAuctionListingDetails(
        @WebParam(name = "auctionId", targetNamespace = "")
        Long auctionId)
        throws AuctionListingAlreadyClosedException_Exception, AuctionListingNotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<ws.auctionlistingWebService.AuctionListing>
     * @throws EmptyListException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "remoteBrowseAllAuctionListings", targetNamespace = "http://ws.session.ejb/", className = "ws.auctionlistingWebService.RemoteBrowseAllAuctionListings")
    @ResponseWrapper(localName = "remoteBrowseAllAuctionListingsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.auctionlistingWebService.RemoteBrowseAllAuctionListingsResponse")
    @Action(input = "http://ws.session.ejb/AuctionListingWebservice/remoteBrowseAllAuctionListingsRequest", output = "http://ws.session.ejb/AuctionListingWebservice/remoteBrowseAllAuctionListingsResponse", fault = {
        @FaultAction(className = EmptyListException_Exception.class, value = "http://ws.session.ejb/AuctionListingWebservice/remoteBrowseAllAuctionListings/Fault/EmptyListException")
    })
    public List<AuctionListing> remoteBrowseAllAuctionListings()
        throws EmptyListException_Exception
    ;

    /**
     * 
     * @param customerId
     * @return
     *     returns java.util.List<ws.auctionlistingWebService.AuctionListing>
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "remoteBrowseWonAuctionListing", targetNamespace = "http://ws.session.ejb/", className = "ws.auctionlistingWebService.RemoteBrowseWonAuctionListing")
    @ResponseWrapper(localName = "remoteBrowseWonAuctionListingResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.auctionlistingWebService.RemoteBrowseWonAuctionListingResponse")
    @Action(input = "http://ws.session.ejb/AuctionListingWebservice/remoteBrowseWonAuctionListingRequest", output = "http://ws.session.ejb/AuctionListingWebservice/remoteBrowseWonAuctionListingResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/AuctionListingWebservice/remoteBrowseWonAuctionListing/Fault/CustomerNotFoundException")
    })
    public List<AuctionListing> remoteBrowseWonAuctionListing(
        @WebParam(name = "customerId", targetNamespace = "")
        Long customerId)
        throws CustomerNotFoundException_Exception
    ;

}
